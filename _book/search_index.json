[
["understanding-data.html", "1 Understanding Data 1.1 Introduction 1.2 R 1.3 Statistical terminology 1.4 Descriptive statistics 1.5 Done", " 1 Understanding Data 1.1 Introduction This weekâ€™s content focuses on understanding data. Some of you, however, may wonder why taking a statistical methods course is necessary in the first place? Besides it being a requirement, there are several compelling reasons to have a (basic) knowledge of data and statistics: it will help you to understand and critically engage with academic articles; it will help you critically assess statistics used in the media, government reports, etc.; it will help you write a dissertation based on secondary analysis; it will help you write your own work convicingly. Further to this, data skills are in high demand by employers both in the public and private sectors. TL;DR: Knowing how to collect data, compile data from different sources, and analyse that data is very important. 1.1.1 Video: Overview [Lecture slides] [Watch on MS stream] 1.2 R The best way of learning about data is by working with data and getting your hands dirty. Before we will introduce some statistical methodology and talk about something called descriptive statistics, we will first have a look at one of the software tools with which we will be working this semester: R. R is a free software environment for statistical computing and graphics. It is extremely powerful and as such is now widely used for academic research as well as in the commercial sector. Ever wondered how those excellent graphs created by the Financial Times have been created? 1.2.1 Video: R [Lecture slides] [Watch on MS stream] Unlike software such as Excel or SPSS, the user has to type commands to get it to execute tasks such as loading in a dataset or performing a calculation. The biggest advantage of this approach is that you can build up a document, or script, that provides a record of what you have done, which in turn enables the straightforward repetition of tasks. Graphics can be easily modified and tweaked by making slight changes to the script or by scrolling through past commands and making quick edits. Unfortunately command-line computing can also be off-putting at first. It is easy to make mistakes that arenâ€™t always obvious to detect. Nevertheless, there are good reasons to stick with R. These include: Itâ€™s broadly intuitive with a strong focus on publishable-quality graphics. Itâ€™s â€˜intelligentâ€™ and offers in-built good practice â€“ it tends to stick to statistical conventions and present data in sensible ways. Itâ€™s free, cross-platform, customisable and extendable with a whole swathe of libraries (â€˜add onsâ€™) including those for discrete choice, multilevel and longitudinal regression, and mapping, spatial statistics, spatial regression, and geostatistics. It is well respected and used at the worldâ€™s largest technology companies (including Google, Microsoft and Facebook, and at hundreds of other companies. It offers a transferable skill that shows to potential employers experience both of statistics and of computing. The intention of the practical elements of this weekâ€™s content, is to provide a thorough introduction to R to get you started: The basic programming principles behind R. Loading in data from csv files and subsetting it into smaller chunks. Calculating a number of descriptive statistics for data exploration and checking. Creating basic and more complex plots in order to visualise the distributions values within a dataset. R has a steep learning curve, but the benefits of using it are well worth the effort. Take your time and think through every piece of code you type in. The best way to learn R is to take the basic code provided in tutorials and experiment with changing parameters - such as the colour of points in a graph - to really get â€˜under the hoodâ€™ of the software. Take lots of notes as you go along and if you are getting really frustrated take a break! Following a coding tutorialpic.twitter.com/dXUfp0WWv7 â€” Tawanda NyahuyeðŸ‘¨ ðŸ’» (@towernter) November 28, 2020 1.2.2 Getting started with R You can download and install R on your laptop but for the purposes of this course we would like you to use the version hosted on the UCL servers so that everyone participating in the course has access to the same version of the software. Open a web browser and navigate to: https://rstudio.rc.ucl.ac.uk/ Log in with your usual UCL username and password. You should see the RStudio interface appear. If you managed to log onto RStudio server: brilliant, we are ready to go. At its absolute simplest R is a calculator, so letâ€™s try adding some numbers by typing and hitting enter to execute the code: 4 + 10 ## [1] 14 You will notices that in the command line window, it will give you an answer directly (i.e.Â 14). These outputs of the command line window are shown as ## throughout this handbook and you do not need to type anything into the command line that follows ## (because it simply shows the result of a command!). Anything that appears as red in the command line means it is an error (or a warning) so you will likely need to correct your code. If you see a &gt; on the left it means you can type in your next line, a + means that you havenâ€™t finished the previous line of code. As will become clear, + signs often appear if you donâ€™t close brackets or you did not properly finish your command in a way that R expected. Rather than using numbers and values, it is often easier to assign numbers (or groups of them) a memorable name for easy reference later. In R terminology this is called creating an object and this is really important. Letâ€™s try this: a &lt;- 4 b &lt;- 10 The &lt;- symbol is used to assign the value to the name, in the above we assigned the integer 4 to an object with the name a. Similarly, we assigned the integer 10 to an object with the name b To see what each object contains you can just type print(name of your object), so in our case: print(a) ## [1] 4 print(b) ## [1] 10 This may look trivial, but in fact it is extremely powerful as objects can be treated in the same way as the numbers they contain. For instance: a*b ## [1] 40 Or even used to create new objects: ab &lt;- a*b print(ab) ## [1] 40 You can generate a list of objects that are currently active using the ls() command. R stores objects in your computerâ€™s RAM so they can be processed quickly. Without saving (we will come onto this below) these objects will be lost if you close R (or it crashes). ls() ## [1] &quot;a&quot; &quot;ab&quot; &quot;b&quot; You may wish to delete an object. This can be done using rm() with the name of the object in the brackets. For example: rm(ab) To confirm that your command has worked, just run the ls() command again: ls() ## [1] &quot;a&quot; &quot;b&quot; 1.3 Statistical terminology Letâ€™s now take a short break from RStudio and have a look at some theory: the video below will introduce you to some essential statistical terminology. 1.3.1 Video: Essential Statistical Terminology [Lecture slides] [Watch on MS stream] Now we now a little more about variables, we can go back to RStudio. Until now our objects have been extremely simple integers (and you should now know what integers are!), but the real power of R comes when we can begin to execute functions on objects. Letâ€™s check this out by firstly building a more complex object through the c() function. The c in the c() function means concatenate and essentially groups things together. Letâ€™s create an object that contains the (fictional) birth years of the six main characters in the popular American television sitcom Friends. friends_dob &lt;- c(1974,1977,1977,1979,1975,1976) Letâ€™s check the results. print(friends_dob) ## [1] 1974 1977 1977 1979 1975 1976 Now, we can execute some statistical functions on this object such as cacluating the mean() value, the median() value, and the range() of the data. mean(friends_dob) ## [1] 1976.333 median(friends_dob) ## [1] 1976.5 range(friends_dob) ## [1] 1974 1979 All functions need a series of arguments to be passed to them in order to work. These arguments are typed within the brackets and typically comprise the name of the object (in the examples above its the friends_dob) that contains the data followed by some parameters. The exact parameters required are listed in the functions help files. To find the help file for the function type ? followed by the function name, for example: ?mean All helpfiles will have a usage heading detailing the parameters required. In the case of the mean you can see it simply says mean(x, ...). In function helpfiles x will always refer to the object the function requires and, in the case of the mean, the ... refers to some optional arguments that we donâ€™t need to worry about. When you are new to R the help files can seem pretty impenetrable (because they often are!). Up until relatively recently these were all people had to go on, but in recent years R has really taken off and so there are plenty of places to find help and tips. Google is best tool to use. When people are having problems they tend to post examples of their code online and then the R community will correct it. One of the best ways to solve a problem is to paste their correct code into your R command line window and then gradually change it for your data an purposes. The structure of the friends_dob object - essentially a group of numbers (integers!) - is known as a vector object in R. To build more complex objects that, for example, resemble a spreadsheet with multiple columns of data, it is possible to create a class of objects known as a data frame. This is probably the most commonly used class of object in R. We can create one here by combining two vectors. friends_characters &lt;- c(&#39;Monica&#39;,&#39;Ross&#39;,&#39;Rachel&#39;,&#39;Joey&#39;,&#39;Chandler&#39;,&#39;Phoebe&#39;) friends &lt;- data.frame(friends_characters,friends_dob) If you type print(friends) you will see our data frame. print(friends) ## friends_characters friends_dob ## 1 Monica 1974 ## 2 Ross 1977 ## 3 Rachel 1977 ## 4 Joey 1979 ## 5 Chandler 1975 ## 6 Phoebe 1976 Tips R is case sensitive so you need to make sure that you capitalise everything correctly if required. The spaces between the words donâ€™t matter but the positions of the commas and brackets do. Remember, if you find the prompt, &gt;, is replaced with a + it is because the command is incomplete. If necessary, hit the escape (esc) key and try again. It is important to come up with good names for your objects. In the case of the friends_dob object we used a underscore to separate the words. It is good practice to keep the object names as short as posssible so we could have gone for FriendsDob or f_dob. Be aware: you cannot start an object name with a number! If you press the up arrow in the command line you will be able to edit the previous lines of code you inputted. Recap In this section you have: Entered your first commands into the R command line interface. Created objects in R. Created a vector of values (the friends_dob object). Executed some simple R functions. Created a data frame (called friends). 1.4 Descriptive statistics 1.4.1 Video: Descriptive statistics In the previous section, R may have seemed fairly labour-intensive. We had to enter all our data manually and each line of code had to be written into the command line. Fortunately this isnâ€™t routinely the case. In RStudio look to the top left corner and you will see a plus symbol, click on it and select R Script. This should give you a blank document that looks a bit like the command line. The difference is that anything you type here can be saved as a script and re-run at a later date. When writing a script it is important to keep notes about what each step is doing. To do this the hash (#) symbol is put before any code. This comments out that particular line so that R ignores it when the script is run. Type the following into the script: # first attempt at creating a script Some.Data &lt;- data.frame(0:10,20:30) print(Some.Data) Question Without running these lines of code, what do you expect to happen? Do you understand what these simple line of codes do? In the scripting window if you highlight all the code you have written and press the Run button on the top on the scripting window you will see that the code is sent to the command line and the text on the line after the # is ignored. From now on you should type your code in the scripting window and then use the Run button to execute it. If you have an error then edit the line in the script and hit run again. Try it: # first attempt at creating a script Some.Data &lt;- data.frame(0:10,20:30) print(Some.Data) ## X0.10 X20.30 ## 1 0 20 ## 2 1 21 ## 3 2 22 ## 4 3 23 ## 5 4 24 ## 6 5 25 ## 7 6 26 ## 8 7 27 ## 9 8 28 ## 10 9 29 ## 11 10 30 The My.Data object is a data frame in need of some sensible column headings. You can add these by typing: # add column names names(Some.Data)&lt;- c(&#39;x&#39;,&#39;y&#39;) # print the object to check names were added successfully print(Some.Data) ## x y ## 1 0 20 ## 2 1 21 ## 3 2 22 ## 4 3 23 ## 5 4 24 ## 6 5 25 ## 7 6 26 ## 8 7 27 ## 9 8 28 ## 10 9 29 ## 11 10 30 Until now we have generated the data used in the examples above. One of Râ€™s great strengths is its ability to load in data from almost any file format. Comma Separated Value (csv) files are our preferred choice. These can be thought of as stripped down Excel spreadsheets. They are an extremely simple format so they are easily machine readable and can therefore be easily read in and written out of R. Since we are now reading and writing files it is good practice to tell R what your working directory is. Your working directory is the folder on the computer where you wish to store the data files you are working with. You can create a folder called POLS0008, for example. If you are using RStudio, on the lower right of the screen is a window with a Files tab. If you click on this tab you can then navigate to the folder you wish to use. You can then click on the More button and then Set as Working Directory. You should then see some code similar to the below appear in the command line. It is also possible to type the code in manually. # set the working directory path to the folder you wish to use # you may need to create the folder first if it doesn&#39;t exist setwd(&#39;~/POLS0008&#39;) # note the single / (\\\\ will also work) Once the working directory is setup it is then possible to load in a csv file. We are going to load a dataset that has been saved in the working directory we just set that shows Londonâ€™s historic population for each of its Boroughs. File download File Type Link Borough Population London csv Download Once downloaded to your own computer, this file will then need to be uploaded into RStudio. To do this click on the Upload button in the files area of the screen. Select the csv file you just downloaded and press OK. We can then type the following to locate and load in the file we need. # load csv file from working directory London.Pop &lt;- read.csv(&#39;census-historic-population-borough.csv&#39;) To view the object type: ## Area.Code Area.Name Persons.1801 Persons.1811 Persons.1821 ## 1 00AA City of London 129000 121000 125000 ## 2 00AB Barking and Dagenham 3000 4000 5000 ## 3 00AC Barnet 8000 9000 11000 ## 4 00AD Bexley 5000 6000 7000 ## 5 00AE Brent 2000 2000 3000 ## 6 00AF Bromley 8000 9000 11000 ## 7 00AG Camden 100000 128000 163000 ## 8 00AH Croydon 8000 10000 12000 ## 9 00AJ Ealing 7000 8000 9000 ## 10 00AK Enfield 11000 13000 16000 ## 11 00AL Greenwich 35000 46000 50000 ## 12 00AM Hackney 50000 64000 80000 ## 13 00AN Hammersmith and Fulham 10000 13000 15000 ## 14 00AP Haringey 6000 7000 9000 ## 15 00AQ Harrow 4000 5000 5000 ## 16 00AR Havering 6000 7000 8000 ## 17 00AS Hillingdon 9000 11000 12000 ## 18 00AT Hounslow 14000 16000 19000 ## 19 00AU Islington 65000 83000 108000 ## 20 00AW Kensington and Chelsea 18000 25000 35000 ## 21 00AX Kingston upon Thames 5000 5000 6000 ## 22 00AY Lambeth 33000 49000 67000 ## 23 00AZ Lewisham 16000 20000 24000 ## 24 00BA Merton 5000 6000 7000 ## 25 00BB Newham 8000 10000 12000 ## 26 00BC Redbridge 4000 5000 6000 ## 27 00BD Richmond upon Thames 15000 17000 20000 ## 28 00BE Southwark 116000 139000 175000 ## 29 00BF Sutton 5000 5000 6000 ## 30 00BG Tower Hamlets 144000 180000 219000 ## 31 00BH Waltham Forest 8000 9000 11000 ## 32 00BJ Wandsworth 13000 16000 19000 ## 33 00BK Westminster 231000 254000 298000 ## Persons.1831 Persons.1841 Persons.1851 Persons.1861 Persons.1871 ## 1 123000 124000 128000 112000 75000 ## 2 6000 7000 8000 8000 10000 ## 3 13000 14000 15000 20000 29000 ## 4 9000 11000 12000 15000 22000 ## 5 3000 5000 5000 6000 19000 ## 6 12000 14000 16000 22000 42000 ## 7 199000 229000 270000 307000 342000 ## 8 15000 20000 23000 33000 60000 ## 9 11000 13000 14000 20000 31000 ## 10 17000 18000 19000 23000 30000 ## 11 56000 70000 90000 125000 123000 ## 12 105000 128000 170000 218000 261000 ## 13 18000 23000 30000 40000 66000 ## 14 10000 13000 14000 21000 37000 ## 15 7000 7000 8000 9000 11000 ## 16 9000 11000 11000 12000 15000 ## 17 14000 17000 18000 20000 21000 ## 18 22000 25000 27000 32000 41000 ## 19 137000 168000 220000 283000 337000 ## 20 46000 58000 88000 120000 177000 ## 21 8000 10000 12000 18000 27000 ## 22 99000 129000 155000 182000 236000 ## 23 26000 34000 44000 67000 101000 ## 24 7000 8000 8000 11000 17000 ## 25 14000 15000 22000 43000 70000 ## 26 7000 7000 7000 9000 12000 ## 27 22000 25000 28000 34000 48000 ## 28 207000 243000 292000 346000 407000 ## 29 7000 8000 8000 11000 16000 ## 30 263000 310000 377000 442000 512000 ## 31 11000 12000 13000 17000 28000 ## 32 23000 28000 36000 52000 99000 ## 33 354000 402000 462000 512000 524000 ## Persons.1881 Persons.1891 Persons.1901 Persons.1911 Persons.1921 ## 1 51000 38000 27000 20000 14000 ## 2 13000 19000 27000 39000 44000 ## 3 41000 58000 76000 118000 147000 ## 4 29000 37000 54000 60000 76000 ## 5 31000 65000 120000 166000 184000 ## 6 62000 83000 100000 116000 127000 ## 7 357000 370000 377000 353000 341000 ## 8 85000 110000 143000 190000 213000 ## 9 47000 63000 95000 165000 181000 ## 10 42000 68000 105000 155000 167000 ## 11 139000 175000 210000 213000 237000 ## 12 329000 372000 389000 385000 379000 ## 13 115000 189000 250000 275000 288000 ## 14 73000 142000 209000 271000 285000 ## 15 13000 15000 24000 42000 49000 ## 16 16000 20000 26000 33000 38000 ## 17 23000 25000 29000 38000 48000 ## 18 55000 68000 85000 109000 117000 ## 19 401000 429000 436000 415000 407000 ## 20 234000 243000 250000 239000 240000 ## 21 36000 45000 56000 68000 74000 ## 22 293000 333000 384000 408000 419000 ## 23 145000 191000 238000 270000 287000 ## 24 28000 41000 62000 99000 114000 ## 25 142000 240000 366000 427000 448000 ## 26 18000 31000 66000 113000 124000 ## 27 61000 77000 95000 124000 141000 ## 28 514000 572000 596000 579000 571000 ## 29 24000 30000 38000 54000 60000 ## 30 566000 581000 597000 570000 529000 ## 31 54000 112000 198000 258000 267000 ## 32 173000 251000 319000 369000 380000 ## 33 513000 481000 460000 421000 390000 ## Persons.1931 Persons.1939 Persons.1951 Persons.1961 Persons.1971 ## 1 11000 9000 5000 4767 4000 ## 2 138000 184000 189000 177092 161000 ## 3 231000 296000 320000 318373 307000 ## 4 95000 179000 205000 209893 217000 ## 5 251000 310000 311000 295893 281000 ## 6 165000 237000 268000 294440 305000 ## 7 326000 301000 258000 245707 207000 ## 8 271000 297000 310000 327427 334000 ## 9 226000 285000 311000 301646 301000 ## 10 201000 272000 288000 273857 268000 ## 11 244000 243000 236000 229810 218000 ## 12 364000 332000 265000 257522 220000 ## 13 286000 259000 241000 222124 187000 ## 14 307000 292000 277000 259156 240000 ## 15 97000 190000 219000 209080 203000 ## 16 77000 139000 192000 245598 248000 ## 17 84000 159000 210000 228370 235000 ## 18 156000 196000 211000 208893 207000 ## 19 392000 343000 271000 261232 202000 ## 20 240000 228000 219000 218528 188000 ## 21 93000 129000 147000 146010 141000 ## 22 421000 391000 347000 341626 308000 ## 23 327000 325000 303000 290582 268000 ## 24 158000 197000 200000 189013 177000 ## 25 440000 381000 294000 265388 237000 ## 26 179000 232000 257000 250080 240000 ## 27 161000 178000 188000 181052 175000 ## 28 535000 456000 338000 313413 262000 ## 29 103000 167000 176000 169095 169000 ## 30 489000 419000 231000 205682 166000 ## 31 283000 286000 275000 248591 235000 ## 32 388000 358000 331000 335451 302000 ## 33 372000 347000 300000 271703 240000 ## Persons.1981 Persons.1991 Persons.2001 Persons.2011 Borough.Type ## 1 5864 4230 7181 7375 1 ## 2 149786 140728 163944 185911 2 ## 3 293436 284106 314565 356386 2 ## 4 215233 211404 218301 231997 2 ## 5 253275 227903 263466 311215 2 ## 6 296539 282920 295535 309392 2 ## 7 172014 165274 198022 220338 1 ## 8 317980 301904 330584 363378 2 ## 9 279846 264867 300943 338449 2 ## 10 258770 250750 273565 312466 2 ## 11 211840 201545 214402 254557 2 ## 12 180434 162772 202825 246270 1 ## 13 148447 137720 165238 182493 1 ## 14 203553 186490 216505 254926 2 ## 15 196571 194893 206822 239056 2 ## 16 240849 225144 224262 237232 2 ## 17 229913 228476 243006 273936 2 ## 18 200829 196602 212352 253957 2 ## 19 160890 154873 175789 206125 1 ## 20 138837 126285 158921 158649 1 ## 21 132957 131436 147271 160060 2 ## 22 246426 220252 266170 303086 1 ## 23 231324 215483 248917 275885 1 ## 24 166100 162741 187919 199693 2 ## 25 209494 200678 243884 307984 1 ## 26 226280 221107 238623 278970 2 ## 27 159693 155698 172330 186990 2 ## 28 211858 198916 244867 288283 1 ## 29 169343 164868 179767 190146 2 ## 30 142841 153255 196083 254096 1 ## 31 215947 203343 218335 258249 2 ## 32 254898 239162 260379 306995 1 ## 33 191098 177743 181284 219396 1 Or if you only want to see the top 10 or bottom 10 rows you can use the head() and tail() commands. These are particularly useful if you have large datasets! ## Area.Code Area.Name Persons.1801 Persons.1811 Persons.1821 ## 1 00AA City of London 129000 121000 125000 ## 2 00AB Barking and Dagenham 3000 4000 5000 ## 3 00AC Barnet 8000 9000 11000 ## 4 00AD Bexley 5000 6000 7000 ## 5 00AE Brent 2000 2000 3000 ## 6 00AF Bromley 8000 9000 11000 ## Persons.1831 Persons.1841 Persons.1851 Persons.1861 Persons.1871 ## 1 123000 124000 128000 112000 75000 ## 2 6000 7000 8000 8000 10000 ## 3 13000 14000 15000 20000 29000 ## 4 9000 11000 12000 15000 22000 ## 5 3000 5000 5000 6000 19000 ## 6 12000 14000 16000 22000 42000 ## Persons.1881 Persons.1891 Persons.1901 Persons.1911 Persons.1921 ## 1 51000 38000 27000 20000 14000 ## 2 13000 19000 27000 39000 44000 ## 3 41000 58000 76000 118000 147000 ## 4 29000 37000 54000 60000 76000 ## 5 31000 65000 120000 166000 184000 ## 6 62000 83000 100000 116000 127000 ## Persons.1931 Persons.1939 Persons.1951 Persons.1961 Persons.1971 ## 1 11000 9000 5000 4767 4000 ## 2 138000 184000 189000 177092 161000 ## 3 231000 296000 320000 318373 307000 ## 4 95000 179000 205000 209893 217000 ## 5 251000 310000 311000 295893 281000 ## 6 165000 237000 268000 294440 305000 ## Persons.1981 Persons.1991 Persons.2001 Persons.2011 Borough.Type ## 1 5864 4230 7181 7375 1 ## 2 149786 140728 163944 185911 2 ## 3 293436 284106 314565 356386 2 ## 4 215233 211404 218301 231997 2 ## 5 253275 227903 263466 311215 2 ## 6 296539 282920 295535 309392 2 ## Area.Code Area.Name Persons.1801 Persons.1811 Persons.1821 ## 28 00BE Southwark 116000 139000 175000 ## 29 00BF Sutton 5000 5000 6000 ## 30 00BG Tower Hamlets 144000 180000 219000 ## 31 00BH Waltham Forest 8000 9000 11000 ## 32 00BJ Wandsworth 13000 16000 19000 ## 33 00BK Westminster 231000 254000 298000 ## Persons.1831 Persons.1841 Persons.1851 Persons.1861 Persons.1871 ## 28 207000 243000 292000 346000 407000 ## 29 7000 8000 8000 11000 16000 ## 30 263000 310000 377000 442000 512000 ## 31 11000 12000 13000 17000 28000 ## 32 23000 28000 36000 52000 99000 ## 33 354000 402000 462000 512000 524000 ## Persons.1881 Persons.1891 Persons.1901 Persons.1911 Persons.1921 ## 28 514000 572000 596000 579000 571000 ## 29 24000 30000 38000 54000 60000 ## 30 566000 581000 597000 570000 529000 ## 31 54000 112000 198000 258000 267000 ## 32 173000 251000 319000 369000 380000 ## 33 513000 481000 460000 421000 390000 ## Persons.1931 Persons.1939 Persons.1951 Persons.1961 Persons.1971 ## 28 535000 456000 338000 313413 262000 ## 29 103000 167000 176000 169095 169000 ## 30 489000 419000 231000 205682 166000 ## 31 283000 286000 275000 248591 235000 ## 32 388000 358000 331000 335451 302000 ## 33 372000 347000 300000 271703 240000 ## Persons.1981 Persons.1991 Persons.2001 Persons.2011 Borough.Type ## 28 211858 198916 244867 288283 1 ## 29 169343 164868 179767 190146 2 ## 30 142841 153255 196083 254096 1 ## 31 215947 203343 218335 258249 2 ## 32 254898 239162 260379 306995 1 ## 33 191098 177743 181284 219396 1 To get to know a bit more about the file you have loaded R has a number of useful functions. We can use these to find out how many columns (variables) and rows (cases) the data frame (dataset) contains. ## [1] 25 ## [1] 33 ## [1] &quot;Area.Code&quot; &quot;Area.Name&quot; &quot;Persons.1801&quot; &quot;Persons.1811&quot; ## [5] &quot;Persons.1821&quot; &quot;Persons.1831&quot; &quot;Persons.1841&quot; &quot;Persons.1851&quot; ## [9] &quot;Persons.1861&quot; &quot;Persons.1871&quot; &quot;Persons.1881&quot; &quot;Persons.1891&quot; ## [13] &quot;Persons.1901&quot; &quot;Persons.1911&quot; &quot;Persons.1921&quot; &quot;Persons.1931&quot; ## [17] &quot;Persons.1939&quot; &quot;Persons.1951&quot; &quot;Persons.1961&quot; &quot;Persons.1971&quot; ## [21] &quot;Persons.1981&quot; &quot;Persons.1991&quot; &quot;Persons.2001&quot; &quot;Persons.2011&quot; ## [25] &quot;Borough.Type&quot; Given the number of columns in the pop data frame, subsetting by selecting on the columns of interest would make it easier to handle. In R there are two was of doing this. The first uses the $ symbol to select columns by name and then create a new data frame object. ## London.Pop.Area.Name London.Pop.Persons.2011 ## 1 City of London 7375 ## 2 Barking and Dagenham 185911 ## 3 Barnet 356386 ## 4 Bexley 231997 ## 5 Brent 311215 ## 6 Bromley 309392 A second approach to selecting particular data is to use [Row, Column]. For instance: ## [1] City of London ## 33 Levels: Barking and Dagenham Barnet Bexley Brent Bromley ... Westminster ## [1] 00AA 00AB 00AC 00AD 00AE ## 33 Levels: 00AA 00AB 00AC 00AD 00AE 00AF 00AG 00AH 00AJ 00AK 00AL ... 00BK ## Persons.1851 Persons.1861 Persons.1871 Persons.1881 ## 1 128000 112000 75000 51000 ## 2 8000 8000 10000 13000 ## 3 15000 20000 29000 41000 ## 4 12000 15000 22000 29000 ## 5 5000 6000 19000 31000 In the code snippet, note how the colon : is used to specify a range of values. We used the same technique to create the Some.Data object above. The abilty to select particular columns means we can see how the population of Londonâ€™s Boroughs have changed over the past century. If you type head(PopChange) you will see that the population change column (created to the right of the comma above) has a very long name. This can be changed using the names() command in the same way as we did this for our Some.Data object. Since we have done some new analysis and created additional information it would be good to save the PopChange object to our working directory. This is done using the code below. Within the brackets we put the name of the R object we wish to save on the left of the comma and the file name on the right of the comma (this needs to be in inverted commas). Remember to put .csv after since this is the file format we are saving in. Recap In this section you have learnt how to: Create an R script. Load a csv into R, perform some analysis, and write out a new csv file to your working directory. Subset R data frames by name and also column and/or row number. Seminar assignment Create a csv file that contains the following columns: The names of the London Boroughs. Population change between 1811 and 1911. Population change between 1911 and 1961. Population change 1961 and 2011. Seminar questions Which Boroughs had the fastest growth during the 19th Century, and which had the slowest? You may have noticed that there is an additional column in the pop data frame called Borough-Type. This indicates if a Borough is in inner (1) or outer (2) London. Is this variable ordinal or nominal? 1.5 Done Save your R script by pressing the Save button in the script window. That is it for this week. "]
]
